# üìÅ commands/quiz.py
import os
import discord
from discord import app_commands
from db import postgres as repository
from services.queue_manager import quiz_queue_manager
from services.quiz_logic import load_quiz, list_quizzes
from views.quiz_view import QuizView, ConfirmView
from utils.dm_queue import send_dm
from utils.delete_queue import enqueue_delete
import time
import asyncio
import logging

from datetime import datetime
from services.quiz_logic import load_quiz

# === –ê–≤—Ç–æ–∫–æ–º–ø–ª—ñ—Ç ===
async def autocomplete_quizzes(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=q, value=q)
        for q in list_quizzes() if current.lower() in q.lower()
    ][:25]

@app_commands.command(name="quiz", description="–ü–æ—á–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É")
@app_commands.describe(name="–ù–∞–∑–≤–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏")
@app_commands.autocomplete(name=autocomplete_quizzes)
async def quiz(interaction: discord.Interaction, name: str):
    await interaction.response.defer(ephemeral=True)  # <-- –æ–¥—Ä–∞–∑—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ

    user = interaction.user

    from services.queue_manager import quiz_queue_manager

    if not quiz_queue_manager.is_active(name):
        await interaction.followup.send("‚ùó –¶—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", ephemeral=True)
        return

    await quiz_queue_manager.add_to_queue(name, user)
    pos = quiz_queue_manager.get_position(name, user)
    if pos > 1:
        await send_dm(user, f"‚è≥ –¢–∏ –≤ —á–µ—Ä–∑—ñ –Ω–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É. –û—á—ñ–∫—É–π, —Ç–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è: {pos}.")
        try:
            while True:
                next_user = await asyncio.wait_for(quiz_queue_manager.get_next_user(name), timeout=600)
                if next_user == user:
                    break
        except asyncio.TimeoutError:
            await send_dm(user, "‚åõ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
            return
        await asyncio.sleep(1)  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º

    config = load_quiz(name)
    if not config:
        await interaction.followup.send("‚ùå –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
        return

    attempt_count = await repository.get_attempt_count(str(user.id), name)
    if attempt_count >= config.attempts:
        await interaction.followup.send("‚ùó –¢–∏ –≤–∏—á–µ—Ä–ø–∞–≤(-–ª–∞) –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –Ω–∞ —Ü—é –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É.", ephemeral=True)
        return

    await interaction.followup.send("üì¨ –ü–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—ó DM ‚Äî –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —Ç—É–¥–∏.", ephemeral=True)


    try:
        await send_dm(user, f"üì© –¢–∏ –≥–æ—Ç–æ–≤–∏–π(-–∞) –¥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ **{name}**?")
        view = ConfirmView(user)
        msg = await user.send("–ù–∞—Ç–∏—Å–Ω–∏ \"–ü–æ—á–∞—Ç–∏\", —â–æ–± –ø–æ—á–∞—Ç–∏, –∞–±–æ \"–°–∫–∞—Å—É–≤–∞—Ç–∏\":", view=view)
        await view.wait()
        if not view.confirmed:
            return
    except discord.Forbidden:
        await interaction.response.send_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM.", ephemeral=True)
        return

    score = 0
    messages_to_delete = []
    for idx, q in enumerate(config.questions):
        #logging.info(f"[{datetime.now()}] –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è #{idx + 1}")

        options = "\n".join([f"{chr(0x0410 + i)}. {opt}" for i, opt in enumerate(q.options)])
        deadline = int(time.time()) + q.timeout
        content = f"‚ùì {q.question}\n\n{options}\n\n‚è≥ –ö—ñ–Ω–µ—Ü—å –ø–∏—Ç–∞–Ω–Ω—è <t:{deadline}:R>."

        view = QuizView(user, timeout_seconds=q.timeout)

        msg = await user.send(content, view=view)
        view.message = msg
        messages_to_delete.append(msg)

        #logging.info(f"[{datetime.now()}]  –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        await view.wait()
        #logging.info(f"[{datetime.now()}]  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤")

        is_correct = (view.selected_index == q.answer_index)
        elapsed = view.elapsed
        points = max(0, 100 - elapsed * 2) if is_correct else 0
        score += points

        #logging.info(f"[{datetime.now()}] –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É...")
        start = datetime.now()
        await repository.save_question_result(
            user_id=str(user.id),
            quiz_name=name,
            question_index=idx,
            elapsed_seconds=elapsed,
            points=points,
            is_correct=is_correct
        )
        #logging.info(f"[{datetime.now()}] Save took: {datetime.now() - start}")

        if config.show_feedback:
            feedback_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            logging.info(f"[{datetime.now()}] üì¨ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ—ñ–¥–±–µ–∫—É...")
            await send_dm(user, feedback_text)
            logging.info(f"[{datetime.now()}] üì® –§—ñ–¥–±–µ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")

    await repository.save_result(str(user.id), user.name, name, score)
    await send_dm(user, f"üèÅ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ **{name}** –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: **{score} –±–∞–ª—ñ–≤**.")

    if config.auto_delete_dm:
        await asyncio.sleep(5)
        for m in messages_to_delete:
            try:
                await enqueue_delete(m)
            except (discord.Forbidden, discord.HTTPException):
                continue

# === /ranking —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∫–Ω–µ–Ω–∏–π
# @app_commands.command(name="ranking", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –¢–û–ü-5 –ø–æ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—ñ")
# @app_commands.describe(name="–ù–∞–∑–≤–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏")
# @app_commands.autocomplete(name=autocomplete_quizzes)
# async def ranking(interaction: discord.Interaction, name: str):
#     results = await repository.get_top_results(name)
#     if not results:
#         await interaction.response.send_message("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏.", ephemeral=True)
#         return
#     top = "\n".join([f"{i+1}. {username} ‚Äî {score} –±–∞–ª—ñ–≤" for i, (username, score) in enumerate(results)])
#     await interaction.response.send_message(f"üèÜ **–¢–û–ü-5 ‚Äî {name}:**\n{top}")

@app_commands.command(name="quizzes", description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–∫—Ç–æ—Ä–∏–Ω")
async def quizzes(interaction: discord.Interaction):
    names = list_quizzes()
    if not names:
        await interaction.response.send_message("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–∫—Ç–æ—Ä–∏–Ω.", ephemeral=True)
        return
    await interaction.response.send_message("üìö –î–æ—Å—Ç—É–ø–Ω—ñ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:\n" + "\n".join(f"- {n}" for n in names), ephemeral=True)


@app_commands.command(name="quiz_toggle", description="–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É")
@app_commands.describe(name="–ù–∞–∑–≤–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏", active="–ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–æ–Ω–∞?")
async def quiz_toggle(interaction: discord.Interaction, name: str, active: bool):
    config = load_quiz(name)
    if not config:
        await interaction.response.send_message("‚ùå –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
        return

    creator_ids = os.getenv("CREATOR_IDS", "").split(",")
    if str(interaction.user.id) not in creator_ids:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ —Ç–≤–æ—Ä–µ—Ü—å –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ —ó—ó —Å—Ç–∞–Ω.", ephemeral=True)
        return

    quiz_queue_manager.set_active(name, active)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if active else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    await interaction.response.send_message(f"‚úÖ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ `{name}` —Ç–µ–ø–µ—Ä {status}.", ephemeral=True)


# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥ ===
def setup_commands(bot: discord.ext.commands.Bot):
    bot.tree.add_command(quiz)
    bot.tree.add_command(quiz_toggle)
    # bot.tree.add_command(ranking)  # —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ
    bot.tree.add_command(quizzes)