import discord
from discord.ext import commands
import asyncio
import json
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()  # —Ü–µ —á–∏—Ç–∞—î .env —Ñ–∞–π–ª (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)

TOKEN = os.getenv("TOKEN")  # –∞ —Ü–µ –≤–∏—Ç—è–≥—É—î —Ç–æ–∫–µ–Ω –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

INTENTS = discord.Intents.default()
INTENTS.message_content = True
INTENTS.members = True

bot = commands.Bot(command_prefix="!", intents=INTENTS)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
with open(os.path.join(BASE_DIR, "questions.json"), "r", encoding="utf-8") as f:
    questions = json.load(f)

if os.path.exists("results.json"):
    with open("results.json", "r", encoding="utf-8") as f:
        RESULTS = json.load(f)
else:
    RESULTS = {}

EMOJIS = ["üá¶", "üáß", "üá®", "üá©"]


@bot.event
async def on_ready():
    print(f"üîî –í—ñ–∫—Ç–æ—Ä–∏–Ω—É—Å –∞–∫—Ç–∏–≤–Ω–∏–π —è–∫ {bot.user}")


@bot.command()
async def –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞(ctx):
    user = ctx.author

    if str(user.id) in RESULTS:
        await ctx.send("‚ùó –¢–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–≤(-–ª–∞) –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    guild = ctx.guild
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True, add_reactions=True),
        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, add_reactions=True)
    }

    channel = await guild.create_text_channel(f"–≤—ñ–∫—Ç–æ—Ä–∏–Ω–∞-{user.name}", overwrites=overwrites)
    await channel.send(
        f"{user.mention}, –ø–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É! –û–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ —Ä–µ–∞–∫—Ü—ñ—é. –£ —Ç–µ–±–µ –±—É–¥–µ –¥–æ **20 —Å–µ–∫—É–Ω–¥** –Ω–∞ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è.")

    score = 0

    for q in questions:
        options = "\n".join(f"{EMOJIS[i]} {opt}" for i, opt in enumerate(q["options"]))
        message = await channel.send(f"‚ùì {q['question']}\n\n{options}")

        for emoji in EMOJIS[:len(q["options"])]:
            await message.add_reaction(emoji)

        def check(reaction, user_reacted):
            return (
                    user_reacted.id == user.id and
                    reaction.message.id == message.id and
                    str(reaction.emoji) in EMOJIS
            )

        start_time = datetime.now()
        try:
            reaction, _ = await bot.wait_for('reaction_add', timeout=20.0, check=check)
            elapsed = (datetime.now() - start_time).seconds
            choice_index = EMOJIS.index(str(reaction.emoji))

            if choice_index == q["answer_index"]:
                points = max(0, 100 - elapsed * 5)
                score += points
                await channel.send(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{points} –±–∞–ª—ñ–≤.")
            else:
                await channel.send("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        except asyncio.TimeoutError:
            await channel.send("‚åõ –ß–∞—Å –≤–∏–π—à–æ–≤!")

    RESULTS[str(user.id)] = {"name": user.name, "score": score}

    with open("results.json", "w", encoding="utf-8") as f:
        json.dump(RESULTS, f, ensure_ascii=False, indent=2)

    await channel.send(f"üèÅ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: **{score} –±–∞–ª—ñ–≤**.")
    await asyncio.sleep(30)
    await channel.delete()


@bot.command()
async def —Ä–µ–π—Ç–∏–Ω–≥(ctx):
    if not RESULTS:
        await ctx.send("–©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–≤ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    sorted_results = sorted(RESULTS.items(), key=lambda x: x[1]['score'], reverse=True)
    top = "\n".join([f"{i + 1}. {v['name']} ‚Äî {v['score']} –±–∞–ª—ñ–≤" for i, (_, v) in enumerate(sorted_results[:5])])
    await ctx.send(f"üèÜ **–¢–û–ü-5 –≥—Ä–∞–≤—Ü—ñ–≤:**\n{top}")


bot.run(TOKEN)
